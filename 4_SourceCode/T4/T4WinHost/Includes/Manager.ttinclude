<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data.Linq"#>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ assembly name="$(SolutionDir)\Lib\T4Common.dll" #>
<#@ assembly name="$(SolutionDir)\Lib\T4WinHost.exe" #>
<#@ assembly name="$(SolutionDir)\Lib\Microsoft.TeamFoundation.Client.dll" #>
<#@ assembly name="$(SolutionDir)\Lib\Microsoft.TeamFoundation.VersionControl.Client.dll" #>
<#@ assembly name="$(SolutionDir)\Lib\Microsoft.TeamFoundation.WorkItemTracking.Client.dll" #>
<#@ import namespace="System"#>
<#@ import namespace="System.CodeDom"#>
<#@ import namespace="System.CodeDom.Compiler"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Data.Linq"#>
<#@ import namespace="System.Data.Linq.Mapping"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Xml.Linq"#>
<#@ import namespace="T4Common" #>
<#@ import namespace="T4Common.Properties" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ import namespace="Microsoft.TeamFoundation.Client" #>
<#@ import namespace="Microsoft.TeamFoundation.VersionControl.Client" #>
<#@ Import Namespace="System.Net" #>
<#+
	// Manager class records the various blocks so it can split them up
	class Manager
	{
		protected class Block
		{
			public String Name;
			public int Start, Length;
			public CodeOutputType codeOutputType;
			public string FolderName;
		}

		private T4WinHost.Base.T4Parameters t4Parameter;
		private Block currentBlock;
		private List<Block> files = new List<Block>();
		private Block footer = new Block();
		private Block header = new Block();
		private ITextTemplatingEngineHost host;
		private StringBuilder template;
		protected List<String> generatedFileNames = new List<String>();

		public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template)
		{
			return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
		}

		public void StartNewFile(String name, CodeOutputType codeType, T4WinHost.Base.T4Parameters t4Parameter)
		{
			if (name == null)
				throw new ArgumentNullException("name");
			CurrentBlock = new Block { Name = name, codeOutputType = codeType };
			this.t4Parameter = t4Parameter;
		}

		public void StartFooter()
		{
			CurrentBlock = footer;
		}

		public void StartHeader()
		{
			CurrentBlock = header;
		}

		public void EndBlock()
		{
			if (CurrentBlock == null)
				return;
			CurrentBlock.Length = template.Length - CurrentBlock.Start;
			if (CurrentBlock != header && CurrentBlock != footer)
				files.Add(CurrentBlock);
			currentBlock = null;
		}

		public virtual void Process(bool split)
		{
			TfsTeamProjectCollection tpc = null;
			VersionControlServer sc = null;
			Workspace lstWS = null;
			try
			{
				if (t4Parameter.TFSChk)
				{
	               NetworkCredential networkCredential = new NetworkCredential(t4Parameter.TFSUserName, t4Parameter.TFSPassword);
	              ICredentials credential = (ICredentials)networkCredential;
	             var workspaceInfo = Workstation.Current.GetLocalWorkspaceInfo(t4Parameter.ProjectRootPath);
	            tpc = new TfsTeamProjectCollection(workspaceInfo.ServerUri, credential);
	           //sc = (VersionControlServer)tpc.GetService(typeof(VersionControlServer));
	          //lstWS = sc.QueryWorkspaces(null, t4Parameter.TFSUserName.Substring(0, t4Parameter.TFSUserName.IndexOf(@"@")), null).FirstOrDefault(x => x.IsLocal);
	         lstWS = workspaceInfo.GetWorkspace(tpc);
				}
			}
			catch (Exception e)
			{

			}
			if (split)
			{
				EndBlock();
				String headerText = template.ToString(header.Start, header.Length);
				String footerText = template.ToString(footer.Start, footer.Length);
				String outputPath = Path.GetDirectoryName(host.TemplateFile);
				files.Reverse();
				IList<Block> regenerateBlocks = new List<Block>();
				foreach (Block block in files)
				{
					string folder = "";
					switch (block.codeOutputType)
					{
						case CodeOutputType.Entity:
							folder = string.Format(@"{0}\{1}\", t4Parameter.EntityFolder, CodeOutputType.Entity.ToString());
							break;
						case CodeOutputType.EntityMapping:
							folder = string.Format(@"{0}\{1}\", t4Parameter.EntityFolder, CodeOutputType.EntityMapping.ToString());
							break;
						case CodeOutputType.EntityRoot:
							folder = string.Format(@"{0}\", t4Parameter.EntityFolder);
							break;
						case CodeOutputType.ViewEntity:
							folder = string.Format(@"{0}\{1}\", t4Parameter.EntityFolder, CodeOutputType.ViewEntity.ToString());
							break;
						case CodeOutputType.ViewEntityMapping:
							folder = string.Format(@"{0}\{1}\", t4Parameter.EntityFolder, CodeOutputType.ViewEntityMapping.ToString());
							break;
						case CodeOutputType.SPEntityMapping:
							folder = string.Format(@"{0}\{1}\", t4Parameter.EntityFolder, CodeOutputType.SPEntityMapping.ToString());
							break;
						case CodeOutputType.SPEntity:
							folder = string.Format(@"{0}\{1}\", t4Parameter.EntityFolder, CodeOutputType.SPEntity.ToString());
							break;
						case CodeOutputType.SPBiz:
							folder = string.Format(@"{0}\{1}\", t4Parameter.BizFolder, CodeOutputType.SPBiz.ToString());
							break;
						case CodeOutputType.SPDal:
							folder = string.Format(@"{0}\{1}\", t4Parameter.DalFolder, CodeOutputType.SPDal.ToString());
							break;
						case CodeOutputType.Biz:
							folder = string.Format(@"{0}\{1}\", t4Parameter.BizFolder, CodeOutputType.Biz.ToString());
							break;
						case CodeOutputType.BizView:
							folder = string.Format(@"{0}\{1}\", t4Parameter.BizFolder, CodeOutputType.BizView.ToString());
							break;
						case CodeOutputType.Dal:
							folder = string.Format(@"{0}\{1}\", t4Parameter.DalFolder, CodeOutputType.Dal.ToString());
							break;
						case CodeOutputType.DalView:
							folder = string.Format(@"{0}\{1}\", t4Parameter.DalFolder, CodeOutputType.DalView.ToString());
							break;
						case CodeOutputType.BizRoot:
							folder = string.Format(@"{0}\", t4Parameter.BizFolder);
							break;
						case CodeOutputType.DalRoot:
							folder = string.Format(@"{0}\", t4Parameter.DalFolder);
							break;
						case CodeOutputType.Enum:
							folder = string.Format(@"{0}\", t4Parameter.EnumFolder);
							break;
						case CodeOutputType.CSProjEntity:
							folder = string.Format(@"{0}\", t4Parameter.EntityFolder);
							break;
						case CodeOutputType.CSProjDal:
							folder = string.Format(@"{0}\", t4Parameter.DalFolder);
							break;
						case CodeOutputType.CSProjBiz:
							folder = string.Format(@"{0}\", t4Parameter.BizFolder);
							break;
						case CodeOutputType.CSProjEnum:
							folder = string.Format(@"{0}\", t4Parameter.EnumFolder);
							break;
						case CodeOutputType.Solution:
							folder = "";
							break;
						default:
							break;
					}
					if (!Directory.Exists(t4Parameter.ProjectRootPath + folder))
						Directory.CreateDirectory(t4Parameter.ProjectRootPath + folder);
					else
						File.SetAttributes(t4Parameter.ProjectRootPath + folder, FileAttributes.Normal);
					String fileName = t4Parameter.ProjectRootPath + folder + block.Name;//Path.Combine(outputPath+folder, block.Name);
					String content = headerText + template.ToString(block.Start, block.Length) + footerText;
					if ((block.codeOutputType == CodeOutputType.Biz || block.codeOutputType == CodeOutputType.Dal || block.codeOutputType == CodeOutputType.Entity || block.codeOutputType == CodeOutputType.ViewEntity) && !Path.GetFileName(fileName).EndsWith(".Designer.cs") && File.Exists(fileName))
					{
						template.Remove(block.Start, block.Length);
						continue;
					}
					else if ((block.codeOutputType == CodeOutputType.Solution || block.codeOutputType == CodeOutputType.CSProjEntity || block.codeOutputType == CodeOutputType.CSProjDal || block.codeOutputType == CodeOutputType.CSProjBiz || block.codeOutputType == CodeOutputType.CSProjEnum) && File.Exists(fileName))
					{
						template.Remove(block.Start, block.Length);
						continue;
					}
					else
					{
						try
						{
							if (IsFileContentDifferent(fileName, content) && lstWS != null)
								lstWS.PendEdit(fileName);
						}
						catch { }
						CreateFile(fileName, content);
						template.Remove(block.Start, block.Length);
						block.FolderName = folder;
						regenerateBlocks.Add(block);
					}
				}
				if (t4Parameter.IsGenerateSingle)
					AddFilesToProject(regenerateBlocks, lstWS);
				files.Clear();
			}
		}

		protected virtual void CreateFile(String fileName, String content)
		{
			if (IsFileContentDifferent(fileName, content)){
				File.WriteAllText(fileName, content);
			}
		}

		public virtual String GetCustomToolNamespace(String fileName)
		{
			return null;
		}

		public virtual String DefaultProjectNamespace
		{
			get { return null; }
		}

		protected bool IsFileContentDifferent(String fileName, String newContent)
		{
			return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
		}

		protected void AddFilesToProject(IList<Block> blocks, Workspace lstWS)
		{
			XNamespace ns = "http://schemas.microsoft.com/developer/msbuild/2003";
			foreach (var item in blocks)
			{
				string[] fileNameParts = item.FolderName.Split(new string[] { "\\" }, StringSplitOptions.RemoveEmptyEntries);
				string projectName = fileNameParts[0] + ".csproj";
				string projectFilePath = t4Parameter.ProjectRootPath + fileNameParts[0] + "\\" + projectName;
				if (!File.Exists(projectFilePath))
					return;
				string fileRelativePath = item.FolderName + item.Name;
				fileRelativePath = fileRelativePath.Substring(fileRelativePath.IndexOf('\\') + 1, fileRelativePath.Length - fileRelativePath.IndexOf('\\') - 1);
				XElement root = XElement.Load(projectFilePath);

				IEnumerable<XElement> itemGroups =
					from el in root.Elements(ns + "ItemGroup")
						select el;
				XElement willInsertNode = null;
				bool isNeedInsert = true;
				foreach (XElement el in itemGroups)
				{
					var complieFiles = from t in el.Elements(ns + "Compile").Union(el.Elements(ns + "EmbeddedResource"))
							select new { Include = t.Attribute("Include").Value };
					if (complieFiles.Count() > 0)
					{
						willInsertNode = el;
					}
					if (complieFiles.Count(x => x.Include.Equals(fileRelativePath)) > 0)
						isNeedInsert = false;
				}

				if (isNeedInsert)
				{
					if (willInsertNode == null)
					{
						willInsertNode = new XElement(ns + "ItemGroup");
						root.Add(willInsertNode);
					}
					try
					{
						if (lstWS != null){
							lstWS.PendEdit(projectFilePath);
							lstWS.PendAdd(t4Parameter.ProjectRootPath + item.FolderName + item.Name);
						}
					}
					catch { }

                    XElement compileElement = new XElement(ns + (item.Name.EndsWith(".cs") ? "Compile" : "EmbeddedResource"), new XAttribute("Include", fileRelativePath));
					if (item.Name.EndsWith(".Designer.cs"))
					{
						var dependElement = new XElement(ns + "DependentUpon");
						dependElement.Add(item.Name.Replace(".Designer", ""));
						compileElement.Add(dependElement);
					}
					willInsertNode.Add(compileElement);
					root.Save(projectFilePath);
				}
			}
		}

		private Manager(ITextTemplatingEngineHost host, StringBuilder template)
		{
			this.host = host;
			this.template = template;
		}

		private Block CurrentBlock
		{
			get { return currentBlock; }
			set
			{
				if (CurrentBlock != null)
					EndBlock();
				if (value != null)
					value.Start = template.Length;
				currentBlock = value;
			}
		}
		private class VSManager : Manager
		{
			private EnvDTE.ProjectItem templateProjectItem;
			private EnvDTE.DTE dte;
			private Action<String> checkOutAction;
			private Action<IEnumerable<String>> projectSyncAction;

			public override String DefaultProjectNamespace
			{
				get
				{
					return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
				}
			}

			public override String GetCustomToolNamespace(string fileName)
			{
				return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
			}

			public override void Process(bool split)
			{
				if (templateProjectItem.ProjectItems == null)
					return;
				base.Process(split);
				projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
			}

			protected override void CreateFile(String fileName, String content)
			{
				if (IsFileContentDifferent(fileName, content))
				{
					CheckoutFileIfRequired(fileName);
					File.WriteAllText(fileName, content);
				}
			}

			internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
				: base(host, template)
			{
				var hostServiceProvider = (IServiceProvider)host;
				if (hostServiceProvider == null)
					throw new ArgumentNullException("Could not obtain IServiceProvider");
				dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
				if (dte == null)
					throw new ArgumentNullException("Could not obtain DTE from host");
				templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
				checkOutAction = (String fileName) => dte.SourceControl.CheckOutItem(fileName);
				projectSyncAction = (IEnumerable<String> keepFileNames) => ProjectSync(templateProjectItem, keepFileNames);
			}

			private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<String> keepFileNames)
			{
				var keepFileNameSet = new HashSet<String>(keepFileNames);
				var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
				var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.get_FileNames(0)) + ".";
				foreach (EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
					projectFiles.Add(projectItem.get_FileNames(0), projectItem);

				// Remove unused items from the project
				foreach (var pair in projectFiles)
					if (!keepFileNames.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
						pair.Value.Delete();

				// Add missing files to the project comment by zhc
				//foreach(String fileName in keepFileNameSet)
				//    if (!projectFiles.ContainsKey(fileName))
				//        templateProjectItem.ProjectItems.AddFromFile(fileName);
			}

			private void CheckoutFileIfRequired(String fileName)
			{
				var sc = dte.SourceControl;
				if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
					checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
			}
		}
	} #>