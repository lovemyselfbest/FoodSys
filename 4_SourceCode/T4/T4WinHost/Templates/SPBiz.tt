<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="T4Common" #> 
<#@ include file="$(ProjectDir)\Includes\Manager.ttinclude"#>
<#@ include file="$(ProjectDir)\Includes\Common.ttinclude"#>
<#@ Parameter Name="t4Parameter" Type="T4WinHost.Base.T4Parameters" #>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#
   // insert your template code here the tempalte code will be syntaxhighlighted 
   // and you will have intellisense for all namespaces in the full edition
    Dictionary<string, List<SpColumn>> storeProcedureResultMeta = null;
    Dictionary<string, List<SpColumn>> storeProcedureParameterMeta = null;
	storeProcedureResultMeta = t4Parameter.StoreProcedureResultMeta;
	storeProcedureParameterMeta = t4Parameter.StoreProcedureParametersMeta;
    int j = 0;
#>


<# 
	foreach (KeyValuePair<string, List<SpColumn>> entry in storeProcedureResultMeta)
	{
	    List<SpColumn> parameters = storeProcedureParameterMeta[entry.Key];
	  #>
		<# manager.StartNewFile(string.Format("Biz{0}.cs", entry.Key.Replace("_", "")), CodeOutputType.SPBiz, t4Parameter); #>
using System.Collections.Generic; 
using System.Text; 
using System;
using NHibernate;
using <#= t4Parameter.NamespacePrefix #>.Entity;
using NHibernate.Linq;
using Project.Common;
using <#= t4Parameter.NamespacePrefix #>.Dal.SPDal;
using <#= t4Parameter.NamespacePrefix #>.Dal;
using Project.Biz.Base;
using Project.Dal.Base;
namespace <#= t4Parameter.NamespacePrefix #>.Biz.SPBiz
{
	public class  Biz<#= entry.Key.Replace("_","") #> : BaseSPBiz
	{	
		private Dal<#= entry.Key.Replace("_","") #> dal<#= entry.Key.Replace("_","") #>;
		
		private  Biz<#= entry.Key.Replace("_","") #>()
		{
			dal<#= entry.Key.Replace("_","") #> = DalFactory.Get<Dal<#= entry.Key.Replace("_","") #>>();
		}
		public <#= GetReturnType(entry) #> Invoke(<#= GetParameterType(parameters,entry)#>)
		{
		<#
	    if (IsHasReturnType(entry))
	    {
#>
			IList<<#= entry.Key.Replace("_","") #>> records = dal<#= entry.Key.Replace("_","") #>.Invoke(<#=parameters.Count == 0 ? "" : "parameter" #>);
			return records;
			<#
			}else{
		#>
		dal<#= entry.Key.Replace("_","") #>.Invoke(<#=parameters.Count == 0 ? "" : "parameter" #>);
		<#
}
#>
		}
	}
	
}
		<# manager.EndBlock();
 j++;
 if (j >= 10)
 {
	manager.Process(true);
                                                                                                                                                                                                                                                                     j = 0;
} #>
	<#}
#>


<# manager.Process(true); #>

<#+
	string GetTypeName(Type type)
	{
		if(type==typeof(string))
			return "string";
        if (type == typeof(byte[]))
	        return type.Name;
		return string.Format(" System.Nullable<{0}>",type.Name);
	}
    bool IsHasReturnType(KeyValuePair<string, List<SpColumn>> entry)
    {
	   if (entry.Value.Count == 0)
		  return false;
	 return true;
}
    string GetReturnType(KeyValuePair<string, List<SpColumn>> entry)
    {
	   if (entry.Value.Count == 0)
		  return "void";
	 return string.Format("IList<{0}>", entry.Key.Replace("_", ""));
}
    string GetParameterType(List<SpColumn> parameters, KeyValuePair<string, List<SpColumn>> entry)
    {
	   if (parameters.Count == 0)
		  return "";
	 return string.Format("{0}Parameter parameter", entry.Key.Replace("_", ""));
}
#>



