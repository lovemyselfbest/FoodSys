<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="T4Common" #>
<#@ include file="$(ProjectDir)\Includes\Manager.ttinclude"#>
<#@ include file="$(ProjectDir)\Includes\Common.ttinclude"#>
<#@ Parameter Name="t4Parameter" Type="T4WinHost.Base.T4Parameters" #>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#
   // insert your template code here the tempalte code will be syntaxhighlighted 
   // and you will have intellisense for all namespaces in the full edition
	Dictionary<string, List<SpColumn>> storeProcedureResultMeta = null;
	Dictionary<string, List<SpColumn>> storeProcedureParameterMeta = null;
	storeProcedureResultMeta = t4Parameter.StoreProcedureResultMeta;
	storeProcedureParameterMeta = t4Parameter.StoreProcedureParametersMeta;
	int j = 0;
#>


<# 
	foreach (KeyValuePair<string, List<SpColumn>> entry in storeProcedureResultMeta)
	{
	    List<SpColumn> parameters = storeProcedureParameterMeta[entry.Key];
	 #>
	 <#
	    if (parameters.Count == 0 && entry.Value.Count == 0)
		   continue;
#>
		<# manager.StartNewFile(string.Format("{0}.cs", entry.Key.Replace("_", "")), CodeOutputType.SPEntity, t4Parameter); #>
using System.Collections.Generic; 
using System.Text; 
using System; 
namespace <#= t4Parameter.NamespacePrefix #>.Entity {

	<#
if(entry.Value.Count>0){
#>
	public class  <#= entry.Key.Replace("_","") #> 
	{
		<# for (int i = 0; i < entry.Value.Count; i++)
					{#>
			public virtual <#=GetTypeName(entry.Value[i].CType)#>	<#=entry.Value[i].CLegalName  #>{get;set;}
					 
			<#} #>
	}
<#
	}
#>
<#

if (parameters.Count > 0)
{
#>
	public class <#= entry.Key.Replace("_", "") #>Parameter
	{
		<# 
         for (int i = 0; i < parameters.Count; i++)
         {
		#>
			public virtual <#=GetParameterTypeName(parameters[i])#> <#=parameters[i].CLegalName.Replace("@", "")  #>{get;set;}
		<# } #>
	}
<#
}
#>
}
		<# manager.EndBlock(); j++;
 if (j >= 10)
 {
	manager.Process(true);
    j = 0;
} #>
	<#}
#>


<# manager.Process(true); #>

<#+
	string GetParameterTypeName(SpColumn parameter)
	{
		if(parameter.CType==typeof(string))
			return "string";
		if(parameter.IsNullable && parameter.CType!=typeof(byte[]))
			return string.Format(" System.Nullable<{0}>",parameter.CType.Name);
		if(!parameter.IsNullable || parameter.CType == typeof(byte[]))
			return parameter.CType.Name;
		return "";
	}
	string GetTypeName(Type type)
	{
		if(type==typeof(string))
			return "string";
        if (type == typeof(byte[]))
	        return type.Name;
	    return string.Format(" System.Nullable<{0}>",type.Name);
	}
#>



