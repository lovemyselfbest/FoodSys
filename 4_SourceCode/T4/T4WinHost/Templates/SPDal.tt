<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="T4Common" #> 
<#@ include file="$(ProjectDir)\Includes\Manager.ttinclude"#>
<#@ include file="$(ProjectDir)\Includes\Common.ttinclude"#>
<#@ Parameter Name="t4Parameter" Type="T4WinHost.Base.T4Parameters" #>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#
   // insert your template code here the tempalte code will be syntaxhighlighted 
   // and you will have intellisense for all namespaces in the full edition
	Dictionary<string, List<SpColumn>> storeProcedureResultMeta = null;
	Dictionary<string, List<SpColumn>> storeProcedureParameterMeta = null;
	storeProcedureResultMeta = t4Parameter.StoreProcedureResultMeta;
	storeProcedureParameterMeta = t4Parameter.StoreProcedureParametersMeta;
	int j = 0;
#>


<# 
	foreach (KeyValuePair<string, List<SpColumn>> entry in storeProcedureResultMeta)
	{
	    List<SpColumn> parameters = storeProcedureParameterMeta[entry.Key];
	  #>
		<# manager.StartNewFile(string.Format("Dal{0}.cs", entry.Key.Replace("_", "")), CodeOutputType.SPDal, t4Parameter); #>
using System.Collections.Generic; 
using System.Text; 
using System;
using NHibernate;
using <#= t4Parameter.NamespacePrefix #>.Entity;
using NHibernate.Linq;
using Project.Common;
using Project.Dal.Base;
namespace <#= t4Parameter.NamespacePrefix #>.Dal.SPDal
{
	public class  Dal<#= entry.Key.Replace("_","") #> : BaseSPDal
	{	
		private  Dal<#= entry.Key.Replace("_","") #>()
		{
			
		}
		public <#= GetReturnType(entry) #> Invoke(<#= GetParameterType(parameters,entry)#>)
		{
			IQuery query = Session.GetNamedQuery("<#= entry.Key #>");
			<# 
			
			for (int i = 0; i < parameters.Count; i++)
			{
		#>
			<#
				//判断nvarchar(max)情况。保证不被截断。
	            if (parameters[i].CType == typeof(string) && (parameters[i].Length == -1 || parameters[i].Length > 3000))
	           {#>
			query.SetParameter("<#=parameters[i].CName.Replace("@","")  #>", parameter.<#=parameters[i].CName.Replace("@","")  #>,NHibernateUtil.StringClob);
			<#}else{#>
				query.SetParameter("<#=parameters[i].CName.Replace("@","")  #>", parameter.<#=parameters[i].CName.Replace("@","")  #>);
			<#
	}
#>
		<# } #>
			
			<#
	    if (IsHasReturnType(entry))
	    {
#>
			query.SetResultTransformer(new NHibernate.Transform.AliasToBeanResultTransformer(typeof(<#= entry.Key.Replace("_", "") #>)));

			IList<<#= entry.Key.Replace("_", "") #>> records = query.List<<#= entry.Key.Replace("_", "") #>>();
			return records;
			<#
			}else{
		#>
		query.ExecuteUpdate();
		<#
}
#>
		}
	}
	
}
		<# manager.EndBlock(); j++;
 if (j >= 10)
 {
	manager.Process(true);
                                                                                                                                                                                                                                                 j = 0;
} #>
	<#}
#>


<# manager.Process(true); #>

<#+
	string GetTypeName(Type type)
	{
		if(type==typeof(string))
	        return "string";
	    if (type == typeof(byte[]))
	        return type.Name;
		return string.Format(" System.Nullable<{0}>",type.Name);
	}

    bool IsHasReturnType(KeyValuePair<string, List<SpColumn>> entry)
    {
	    if (entry.Value.Count == 0)
		   return false;
        return true;
	}
    string GetReturnType(KeyValuePair<string, List<SpColumn>> entry)
    {
	    if (entry.Value.Count == 0)
		   return "void";
        return string.Format("IList<{0}>", entry.Key.Replace("_", ""));
   }
    string GetParameterType(List<SpColumn> parameters,KeyValuePair<string, List<SpColumn>> entry)
    {
	  if(parameters.Count==0)
	     return "";
      return string.Format("{0}Parameter parameter", entry.Key.Replace("_", ""));
   }
    
#>



